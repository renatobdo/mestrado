Arquitetura dos testes

ArquiteturaDosTestes

São utilizadas 2 máquinas virtuais: vm2: 177.104.61.27 em que estão os IoT Agents LoRa, UL, Json, XML, etc

docker-compose.yml está em https://github.com/renatobdo/heliot/blob/master/docker-compose.yml_vm1

vm1: 177.104.61.126 em que está o servidor LoRA para geração de dados em formato base64

docker-compose.yml https://github.com/renatobdo/heliot/blob/master/docker-compose.yml_vm3

2 notebooks foram utilizados um com Ubuntu e outro com o Windows 10. No Ubuntu foi instalado o Node-Red e no Windows 10 o Iot Redirector e o Heliot.
Cenário dos testes

https://docs.google.com/spreadsheets/d/1NVP1pvPBCw29xQ5PDzMr0tMPG5Xhfww95qH1ZccwvqY/edit?usp=sharing

https://docs.google.com/spreadsheets/d/105WulcEI_N9G7DqwXDJvnhXg6a3PEYmjO1qWytULM5Q/edit#gid=0
Passos para executar os testes

    É necessário possuir os fluxos para geração dos dados: https://github.com/renatobdo/heliot/blob/master/flows.json Os dados são de temperatura obtidos de uma API do openweather https://openweathermap.org/api A partir desse dados de temperatura são gerados dados em diversos formatos: JSON, XML, HTML, UL, LoRa, etc.

    Executar o software SenSE simultaneamento com o Node-Red. O SenSE pode ser baixado do seguinte endereço: https://github.com/ivanzy/SenSE-Sensor-Simulation-Environment

Comando utilizado com 50 sensores em um tempo de 8 horas e 20s de envio entre cada dado.

java -jar SenSE.jar -sensor 50 -rep 1 -time 30000 - p 20 -h tcp://177.104.61.126:1883 -sensorType lora -temp -netkey 9c698235533b8865900aee3558dfc47b -appkey b73485bb9c5e29a2c8b6a330f0bf2ed3 -mac 000000ffff001000 -devAddress 00fb0bc1

Para um teste manual pode ser utilizado um publish via mosquitto. Eu estou usando a vm3 177.104.61.119 que possui o mosquitto:

mosquitto_pub -h 177.104.61.126 -t "application/5/device/221597e4529df57d/rx" -m "{"applicationID":"5","applicationName":"application","deviceName":"device","devEUI":"221597e4529df57d","txInfo":{"frequency":868300000,"dr":1},"adr":false,"fCnt":0,"fPort":1,"data":"dHN8MTYyMjAzOTA1MDk4MQ=="}" ts|1622039050981 = dHN8MTYyMjAzOTA1MDk4MQ==

mosquitto_pub -h 177.104.61.126 -t "application/5/device/221597e4529df57d/rx" -m "{\ "applicationID\ ":\ "5\ ",\ "applicationName\ ":\ "application\ ",\ "deviceName\ ":\ "device\ ",\ "devEUI\ ":\ "221597e4529df57d\ ",\ "txInfo\ ":{\ "frequency\ ":868300000,\ "dr\ ":1},\ "adr\ ":false,\ "fCnt\ ":0,\ "fPort\ ":1,\ "data\ ":\ "dHN8MTYyMjAzOTA1MDk4MQ==\ "}"

ou

mosquitto_pub -h 177.104.61.27 -t "application/5/device/221597e4529df57d/rx" -m "{"applicationID":"5","applicationName":"application","deviceName":"device","devEUI":"221597e4529df57d","txInfo":{"frequency":868300000,"dr":1},"adr":false,"fCnt":0,"fPort":1,"data":"dHN8MTYyMjAzOTA1MDY4MQ=="}" ts|1622039050681 = dHN8MTYyMjAzOTA1MDY4MQ==

obs.: Não se esqueça de retirar os espaços entre a barra e as aspas duplas

mosquitto_pub -h 177.104.61.27 -t "application/5/device/221597e4529df57d/rx" -m "{\ "applicationID\ ":\ "5\ ",\ "applicationName\ ":\ "application\ ",\ "deviceName\ ":\ "device\ ",\ "devEUI\ ":\ "221597e4529df57d\ ",\ "txInfo\ ":{\ "frequency\ ":868300000,\ "dr\ ":1},\ "adr\ ":false,\ "fCnt\ ":0,\ "fPort\ ":1,\ "data\ ":\ "dHN8MTYyMjAzOTA1MDY4MQ==\ "}"

mosquitto_sub -t "#" -h "177.104.61.121" mosquitto_pub -h localhost -t test -m "hello world" mosquitto_sub -h localhost -t test

    Verificar os logs no frontend do Heliot ou no MongoDB Compass.

    API para visualizar os dados notificados no ORION: http://177.104.61.121:8080/ docker run -d -p 8080:3000 renatobdo/mestrado:api


